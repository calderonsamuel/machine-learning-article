# Librerias
```{python}
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
#KNN
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error, r2_score
# Validacion Cruzada
from sklearn.model_selection import KFold
```

# Cargar data
```{python}
# Cargar data
# Verificar que el archivo exista en el directorio 'data'
df = pd.read_csv("data/ReadyToTrain.csv")
df
```
# Separar variables predictoras y objetivo
```{python}
# Separar variables predictoras y objetivo
x = df.drop("shares", axis=1)
y = df["shares"]
# Dividir conjunto de entrenamiento y de prueba
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
```
# Metodos de Entrenaiento
```{python}
# Bosque aleatorio      -> 0.045276831882961284
modelo_bosque_aleatorio = RandomForestClassifier(n_estimators=50, random_state=42)
modelo_bosque_aleatorio.fit(x_train, y_train)
```
```{python}
# Regresion Logistica   -> 0.05978055240257284
modelo_regresion_logistica = LogisticRegression()
modelo_regresion_logistica.fit(x_train, y_train)
```
```{python}
# K-Nearest Neighbors   -> 
modelo_knn = KNeighborsRegressor(n_neighbors=10)
modelo_knn.fit(x_train, y_train)
# Evaluacion del Modelo
y_pred = modelo_knn.predict(x_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Error cuadrático medio:", mse)
print("Coeficiente de determinación:", r2)
```



# Validacion cruzada
```{python}
k = 5
# Configuración de la validación cruzada KFold
kfold = KFold(n_splits=k, shuffle=True, random_state=42)
# Ejecucion de validacion cruzada
scores = []

for train_index, test_index in kfold.split(x, y):
    x_train, x_test = x.iloc[train_index], x.iloc[test_index]
    y_train, y_test = y.iloc[train_index], y.iloc[test_index]

    modelo_regresion_logistica.fit(x_train, y_train)
    y_pred = modelo_regresion_logistica.predict(x_test)

    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    print('-------------------------')
    print("Precisión:", accuracy)
    print("Precisión:", precision)
    print("Recuperación:", recall)
    print("Puntuación F1:", f1)
```
# Hacer predicciones en el conjunto de prueba
```{python}
# Hacer predicciones en el conjunto de prueba
y_pred = modelo_knn.predict(x_test)
```
# Hacer predicciones en el conjunto de prueba
```{python}
# Hacer predicciones en el conjunto de prueba
precision = modelo_knn(y_test, y_pred)
print("Precisión:", precision)
```
# Evaluacion del Modelo
```{python}
y_pred = modelo_regresion_logistica.predict(x_test)

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print("Precisión:", accuracy)
print("Precisión:", precision)
print("Recuperación:", recall)
print("Puntuación F1:", f1)
```

```{python}

```
